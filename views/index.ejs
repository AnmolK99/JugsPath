<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Water Jug Puzzle Solver</title>
    <style>
        :root {
            --primary: #4f46e5;
            --primary-dark: #4338ca;
            --secondary: #06b6d4;
            --light: #f8fafc;
            --dark: #1e293b;
            --error: #ef4444;
            --success: #10b981;
            --border-radius: 10px;
            --box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);
            --accent-1: #f59e0b;
            --accent-2: #8b5cf6;
            --accent-3: #ec4899;
            --neutral-100: #f1f5f9;
            --neutral-200: #e2e8f0;
            --neutral-300: #cbd5e1;
            --neutral-400: #94a3b8;
            --neutral-500: #64748b;
            --neutral-600: #475569;
            --neutral-700: #334155;
        }
        
        body {
            font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            background: linear-gradient(135deg, #f6f9fc 0%, #dbe4f0 100%);
            margin: 0;
            padding: 20px;
            min-height: 100vh;
            color: var(--dark);
            line-height: 1.5;
        }
        
        .container {
            max-width: 800px;
            margin: 0 auto;
            padding: 20px;
        }
        
        header {
            text-align: center;
            margin-bottom: 2rem;
        }
        
        h1 {
            color: var(--primary-dark);
            font-size: 2.5rem;
            margin-bottom: 0.5rem;
            text-shadow: 0 1px 2px rgba(0,0,0,0.1);
        }
        
        .subtitle {
            color: #64748b;
            font-size: 1.1rem;
            max-width: 600px;
            margin: 0 auto 1.5rem;
        }
        
        .card {
            background: white;
            border-radius: var(--border-radius);
            box-shadow: var(--box-shadow);
            overflow: hidden;
            margin-bottom: 2rem;
        }
        
        .card-header {
            background: var(--primary);
            color: white;
            padding: 1rem 1.5rem;
            font-weight: 600;
            font-size: 1.2rem;
        }
        
        .card-body {
            padding: 1.5rem;
        }
        
        .input-row {
            display: flex;
            gap: 20px;
            margin-bottom: 1.5rem;
        }
        
        .input-group {
            flex: 1;
        }
        
        label {
            display: block;
            margin-bottom: 0.5rem;
            font-weight: 500;
            color: #475569;
        }
        
        input {
            width: 100%;
            padding: 0.75rem;
            border: 2px solid #e2e8f0;
            border-radius: var(--border-radius);
            font-size: 1rem;
            transition: all 0.2s ease;
            box-sizing: border-box;
        }
        
        input:focus {
            outline: none;
            border-color: var(--primary);
            box-shadow: 0 0 0 3px rgba(58, 134, 255, 0.2);
        }
        
        input::-webkit-outer-spin-button,
        input::-webkit-inner-spin-button {
            -webkit-appearance: none;
            margin: 0;
        }
        
        input[type=number] {
            -moz-appearance: textfield;
        }
        
        .help-text {
            font-size: 0.85rem;
            color: #64748b;
            margin-top: 0.5rem;
        }
        
        .btn {
            background: var(--primary);
            color: white;
            border: none;
            padding: 0.75rem 1.5rem;
            border-radius: var(--border-radius);
            font-size: 1.1rem;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.2s ease;
            display: inline-block;
            text-align: center;
        }
        
        .btn:hover {
            background: var(--primary-dark);
            transform: translateY(-2px);
            box-shadow: 0 4px 12px rgba(58, 134, 255, 0.3);
        }
        
        .btn:disabled {
            background: #94a3b8;
            cursor: not-allowed;
            transform: none;
            box-shadow: none;
        }
        
        .btn-group {
            display: flex;
            gap: 1rem;
        }
        
        .btn-secondary {
            background: white;
            color: var(--primary);
            border: 2px solid var(--primary);
        }
        
        .btn-secondary:hover {
            background: #f1f5f9;
            box-shadow: 0 4px 12px rgba(58, 134, 255, 0.15);
        }
        
        #result {
            display: none;
        }
        
        .result-heading {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 1rem;
        }
        
        .result-title {
            font-size: 1.2rem;
            font-weight: 600;
            color: var(--primary-dark);
            margin: 0;
        }
        
        .badge {
            display: inline-block;
            padding: 0.25rem 0.75rem;
            border-radius: 9999px;
            font-size: 0.85rem;
            font-weight: 600;
        }
        
        .badge-primary {
            background: rgba(58, 134, 255, 0.15);
            color: var(--primary-dark);
        }
        
        .step-list {
            list-style: none;
            padding: 0;
            margin: 0;
        }
        
        .step-item {
            padding: 1rem;
            margin-bottom: 0.75rem;
            background: #f8fafc;
            border-radius: var(--border-radius);
            border-left: 4px solid var(--primary);
            transition: all 0.2s ease;
        }
        
        .step-item:hover {
            transform: translateX(4px);
            box-shadow: 0 2px 6px rgba(0, 0, 0, 0.1);
        }
        
        .step-number {
            display: inline-block;
            width: 24px;
            height: 24px;
            background: var(--primary);
            color: white;
            border-radius: 50%;
            text-align: center;
            line-height: 24px;
            font-weight: 600;
            font-size: 0.9rem;
            margin-right: 0.75rem;
        }
        
        .explanation {
            margin-top: 0.5rem;
            font-size: 0.95rem;
            color: #64748b;
        }
        
        .animation-container {
            display: flex;
            justify-content: center;
            gap: 2rem;
            margin: 2rem 0;
        }
        
        .jug {
            position: relative;
            width: 100px;
            margin: 0 auto;
        }
        
        .jug-outline {
            stroke: #94a3b8;
            stroke-width: 2;
            fill: white;
        }
        
        .jug-fill-1 {
            fill: #3a86ff;
            transition: height 0.5s ease;
        }
        
        .jug-fill-2 {
            fill: #38b2ac;
            transition: height 0.5s ease;
        }
        
        .jug-label {
            text-align: center;
            font-weight: 600;
            margin-top: 0.5rem;
            color: var(--primary-dark);
        }
        
        .jug-capacity {
            display: block;
            font-size: 0.85rem;
            color: #64748b;
            font-weight: normal;
        }
        
        .no-solution {
            text-align: center;
            padding: 2rem;
            color: var(--error);
            font-weight: 600;
        }
        
        .tooltip {
            position: relative;
            display: inline-block;
            cursor: help;
        }
        
        .tooltip:hover .tooltip-text {
            visibility: visible;
            opacity: 1;
        }
        
        .tooltip-text {
            visibility: hidden;
            width: 200px;
            background-color: #334155;
            color: #fff;
            text-align: center;
            border-radius: 6px;
            padding: 0.75rem;
            position: absolute;
            z-index: 1;
            bottom: 100%;
            left: 50%;
            margin-left: -100px;
            opacity: 0;
            transition: opacity 0.3s;
            font-size: 0.85rem;
            font-weight: normal;
        }
        
        .tooltip-text::after {
            content: "";
            position: absolute;
            top: 100%;
            left: 50%;
            margin-left: -5px;
            border-width: 5px;
            border-style: solid;
            border-color: #334155 transparent transparent transparent;
        }
        
        .controls {
            display: flex;
            justify-content: center;
            gap: 1rem;
            margin-top: 1.5rem;
        }
        
        .control-btn {
            background: var(--light);
            border: 1px solid #cbd5e1;
            border-radius: var(--border-radius);
            padding: 0.5rem 1rem;
            font-size: 0.9rem;
            cursor: pointer;
            transition: all 0.2s ease;
        }
        
        .control-btn:hover {
            background: #e2e8f0;
        }
        
        .control-btn:disabled {
            opacity: 0.5;
            cursor: not-allowed;
        }
        
        .loading-indicator {
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100px;
        }
        
        .spinner {
            width: 40px;
            height: 40px;
            border: 4px solid rgba(58, 134, 255, 0.2);
            border-left-color: var(--primary);
            border-radius: 50%;
            animation: spin 1s linear infinite;
        }
        
        @keyframes spin {
            to { transform: rotate(360deg); }
        }
        
        @media (max-width: 640px) {
            .input-row {
                flex-direction: column;
                gap: 1rem;
            }
            
            .container {
                padding: 10px;
            }
            
            h1 {
                font-size: 2rem;
            }
            
            .animation-container {
                gap: 1rem;
            }
        }
        
        .solution-layout {
            display: flex;
            gap: 2rem;
            margin-top: 1.5rem;
        }
        
        .animation-section {
            flex: 1;
            min-width: 250px;
        }
        
        .steps-section {
            flex: 2;
            max-height: 400px;
            overflow-y: auto;
            border-left: 1px solid #e2e8f0;
            padding-left: 1.5rem;
        }
        
        .animation-container {
            display: flex;
            justify-content: center;
            gap: 2rem;
            margin-bottom: 1.5rem;
        }
        
        .controls {
            display: flex;
            justify-content: center;
            gap: 1rem;
            margin-bottom: 1rem;
        }
        
        @media (max-width: 768px) {
            .solution-layout {
                flex-direction: column;
            }
            
            .steps-section {
                border-left: none;
                border-top: 1px solid #e2e8f0;
                padding-left: 0;
                padding-top: 1.5rem;
                max-height: 300px;
            }
        }
                .gradient-heading {
                    font-size: 3rem;
                    background: linear-gradient(45deg, var(--primary) 0%, var(--secondary) 100%);
                    -webkit-background-clip: text;
                    -webkit-text-fill-color: transparent;
                    text-shadow: 0 2px 10px rgba(79, 70, 229, 0.2);
                    margin-bottom: 1rem;
                    letter-spacing: -0.5px;
                    animation: fadeIn 1s ease-out;
                }
                
                @keyframes fadeIn {
                    from { opacity: 0; transform: translateY(-10px); }
                    to { opacity: 1; transform: translateY(0); }
                }
                
        .badge-accent1 {
            background: rgba(245, 158, 11, 0.15);
            color: var(--accent-1);
        }
        
        .badge-accent2 {
            background: rgba(139, 92, 246, 0.15);
            color: var(--accent-2);
        }
        
        .badge-accent3 {
            background: rgba(236, 72, 153, 0.15);
            color: var(--accent-3);
        }
        
        .badge-success {
            background: rgba(16, 185, 129, 0.15);
            color: var(--success);
        }
        
        .step-item-accent1 {
            border-left: 4px solid var(--accent-1);
        }
        
        .step-item-accent2 {
            border-left: 4px solid var(--accent-2);
        }
        
        .step-item-accent3 {
            border-left: 4px solid var(--accent-3);
        }
        
        .step-item-success {
            border-left: 4px solid var(--success);
        }
        
        .jug-fill-3 {
            fill: #7c3aed;
            transition: height 0.5s ease;
        }
        
        .jug-fill-4 {
            fill: #06b6d4;
            transition: height 0.5s ease;
        }
        
        .btn-accent1 {
            background: #7c3aed;
            color: white;
        }
        
        .btn-accent1:hover {
            background: #6d28d9;
            transform: translateY(-2px);
            box-shadow: 0 4px 12px rgba(124, 58, 237, 0.3);
        }
        
        .btn-accent2 {
            background: var(--secondary);
            color: white;
        }
        
        .btn-accent2:hover {
            background: #0891b2;
            transform: translateY(-2px);
            box-shadow: 0 4px 12px rgba(6, 182, 212, 0.3);
        }
        
        .btn-accent3 {
            background: #f97316;
            color: white;
        }
        
        .btn-accent3:hover {
            background: #ea580c;
            transform: translateY(-2px);
            box-shadow: 0 4px 12px rgba(249, 115, 22, 0.3);
        }
        
        .card-header-accent1 {
            background: #7c3aed;
            color: white;
        }
        
        .card-header-accent2 {
            background: var(--secondary);
            color: white;
        }
        
        .card-header-accent3 {
            background: #f97316;
            color: white;
        }
    </style>
</head>
<body>
    <div class="container">
        <header>
            <h1 class="gradient-heading">Water Jug Puzzle Solver</h1>

            <p class="subtitle">
                Find the solution to the classic water jug problem: given two jugs of different capacities, 
                determine if and how you can measure a specific amount of water.
            </p>
        </header>
        
        <div class="card">
            <div class="card-header card-header-accent1">Puzzle Parameters</div>
            <div class="card-body">
                <form id="jugForm">
                    <div class="input-row">
                        <div class="input-group">
                            <label for="jug1Cap">
                                Jug 1 Capacity
                                <span class="tooltip">ⓘ
                                    <span class="tooltip-text">Maximum amount of water jug 1 can hold</span>
                                </span>
                            </label>
                            <input type="number" id="jug1Cap" name="jug1Cap" min="1" required>
                            <div class="help-text">Must be a positive integer</div>
                        </div>
                        
                        <div class="input-group">
                            <label for="jug2Cap">
                                Jug 2 Capacity
                                <span class="tooltip">ⓘ
                                    <span class="tooltip-text">Maximum amount of water jug 2 can hold</span>
                                </span>
                            </label>
                            <input type="number" id="jug2Cap" name="jug2Cap" min="1" required>
                            <div class="help-text">Must be a positive integer</div>
                        </div>
                    </div>
                    
                    <div class="input-row">
                        <div class="input-group">
                            <label for="finJug1">
                                Target Water in Jug 1
                                <span class="tooltip">ⓘ
                                    <span class="tooltip-text">Amount of water you want to end up with in jug 1</span>
                                </span>
                            </label>
                            <input type="number" id="finJug1" name="finJug1" min="0" required>
                            <div class="help-text">Cannot exceed jug 1 capacity</div>
                        </div>
                        
                        <div class="input-group">
                            <label for="finJug2">
                                Target Water in Jug 2
                                <span class="tooltip">ⓘ
                                    <span class="tooltip-text">Amount of water you want to end up with in jug 2</span>
                                </span>
                            </label>
                            <input type="number" id="finJug2" name="finJug2" min="0" required>
                            <div class="help-text">Cannot exceed jug 2 capacity</div>
                        </div>
                    </div>
                    
                    <div class="btn-group">
                        <button type="submit" class="btn btn-accent1" id="calculateBtn">Find Solution</button>
                        <button type="button" class="btn btn-secondary" id="resetBtn">Reset</button>
                    </div>
                </form>
            </div>
        </div>
        
        <div class="card" id="result">
            <div class="card-header card-header-accent2">Solution</div>
            <div class="card-body">
                <div id="loadingIndicator" class="loading-indicator" style="display:none">
                    <div class="spinner"></div>
                </div>
                
                <div id="resultContent">
                    <div class="result-heading">
                        <h3 class="result-title">Steps to Solve</h3>
                        <span class="badge badge-accent2" id="stepCount">0 steps</span>
                    </div>
                    
                    <div class="solution-layout">
                        <div class="animation-section">
                            <div class="animation-container">
                                <div class="jug">
                                    <svg width="100" height="150" viewBox="0 0 100 150">
                                        <rect id="jug1Outline" class="jug-outline" x="20" y="20" width="60" height="120" rx="5" />
                                        <rect id="jug1Fill" class="jug-fill-3" x="20" y="140" width="60" height="0" />
                                    </svg>
                                    <div class="jug-label">
                                        Jug 1
                                        <span class="jug-capacity" id="jug1CapLabel">Capacity: 0</span>
                                    </div>
                                </div>
                                
                                <div class="jug">
                                    <svg width="100" height="150" viewBox="0 0 100 150">
                                        <rect id="jug2Outline" class="jug-outline" x="20" y="20" width="60" height="120" rx="5" />
                                        <rect id="jug2Fill" class="jug-fill-4" x="20" y="140" width="60" height="0" />
                                    </svg>
                                    <div class="jug-label">
                                        Jug 2
                                        <span class="jug-capacity" id="jug2CapLabel">Capacity: 0</span>
                                    </div>
                                </div>
                            </div>
                            
                            <div class="controls">
                                <button class="control-btn" id="prevStepBtn" disabled>← Previous</button>
                                <button class="control-btn" id="nextStepBtn" disabled>Next →</button>
                            </div>
                        </div>
                        
                        <div class="steps-section">
                            <div id="solutionContainer">
                                <ul class="step-list" id="stepList"></ul>
                                <div id="noSolution" class="no-solution" style="display:none">
                                    No solution exists for the given parameters
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    
    <script>
        document.addEventListener('DOMContentLoaded', () => {
            const form = document.getElementById('jugForm');
            const resetBtn = document.getElementById('resetBtn');
            const resultContainer = document.getElementById('result');
            const stepList = document.getElementById('stepList');
            const stepCount = document.getElementById('stepCount');
            const noSolution = document.getElementById('noSolution');
            const loadingIndicator = document.getElementById('loadingIndicator');
            const resultContent = document.getElementById('resultContent');
            const prevStepBtn = document.getElementById('prevStepBtn');
            const nextStepBtn = document.getElementById('nextStepBtn');
            
            let solutionSteps = [];
            let currentStepIndex = 0;
            
            // Set jug capacity labels based on inputs
            document.getElementById('jug1Cap').addEventListener('input', function() {
                document.getElementById('jug1CapLabel').textContent = `Capacity: ${this.value || 0}`;
            });
            
            document.getElementById('jug2Cap').addEventListener('input', function() {
                document.getElementById('jug2CapLabel').textContent = `Capacity: ${this.value || 0}`;
            });
            
            // Reset form
            resetBtn.addEventListener('click', () => {
                form.reset();
                resultContainer.style.display = 'none';
                document.getElementById('jug1CapLabel').textContent = 'Capacity: 0';
                document.getElementById('jug2CapLabel').textContent = 'Capacity: 0';
            });
            
            // Step navigation
            prevStepBtn.addEventListener('click', () => {
                if (currentStepIndex > 0) {
                    currentStepIndex--;
                    updateCurrentStep();
                }
            });
            
            nextStepBtn.addEventListener('click', () => {
                if (currentStepIndex < solutionSteps.length - 1) {
                    currentStepIndex++;
                    updateCurrentStep();
                }
            });
            
            // Form submission
            form.addEventListener('submit', async (event) => {
                event.preventDefault();
                const calculateBtn = document.getElementById('calculateBtn');
                calculateBtn.disabled = true;
                calculateBtn.textContent = 'Calculating...';
                
                // Validate inputs
                const jug1Cap = parseInt(document.getElementById('jug1Cap').value);
                const jug2Cap = parseInt(document.getElementById('jug2Cap').value);
                const finJug1 = parseInt(document.getElementById('finJug1').value);
                const finJug2 = parseInt(document.getElementById('finJug2').value);
                
                if (finJug1 > jug1Cap || finJug2 > jug2Cap) {
                    alert('Target water cannot exceed jug capacity!');
                    calculateBtn.disabled = false;
                    calculateBtn.textContent = 'Find Solution';
                    return;
                }
                
                try {
                    // Show loading indicator
                    resultContainer.style.display = 'block';
                    loadingIndicator.style.display = 'flex';
                    resultContent.style.display = 'none';
                    
                    // Prepare request data
                    const requestData = {
                        finJug1,
                        finJug2,
                        jug1Cap,
                        jug2Cap
                    };
                    
                    // Call the API
                    const response = await fetch('/api/jugs', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify(requestData)
                    });
                    
                    if (!response.ok) {
                        throw new Error(`Server responded with status: ${response.status}`);
                    }
                    
                    // Get the solution steps from the API
                    const rawSteps = await response.json();
                    
                    // Process steps into a more usable format
                    processSteps(rawSteps, jug1Cap, jug2Cap);
                    
                    // Hide loading, show results
                    loadingIndicator.style.display = 'none';
                    resultContent.style.display = 'block';
                    
                    // Display result
                    displayResults(jug1Cap, jug2Cap);
                    
                    // Scroll to result
                    resultContainer.scrollIntoView({ behavior: 'smooth' });
                    
                } catch (error) {
                    loadingIndicator.style.display = 'none';
                    resultContent.style.display = 'block';
                    noSolution.style.display = 'block';
                    noSolution.textContent = `Error: ${error.message}`;
                    stepList.innerHTML = '';
                    stepCount.textContent = '0 steps';
                } finally {
                    calculateBtn.disabled = false;
                    calculateBtn.textContent = 'Find Solution';
                }
            });
            
            // Process steps from API response format to our format
            function processSteps(rawSteps, jug1Cap, jug2Cap) {
                solutionSteps = [];
                currentStepIndex = 0;
                
                // Check if we have valid steps
                if (!Array.isArray(rawSteps) || rawSteps.length === 0) {
                    return;
                }
                
                // First step is the initial state
                let prevJug1 = rawSteps[0][0];
                let prevJug2 = rawSteps[0][1];
                
                // Add initial state
                solutionSteps.push({
                    action: "Initial state",
                    jug1: prevJug1,
                    jug2: prevJug2,
                    explanation: "Starting configuration"
                });
                
                // Process each step and determine the action taken
                for (let i = 1; i < rawSteps.length; i++) {
                    const [jug1, jug2] = rawSteps[i];
                    let action, explanation;
                    
                    // Determine what action was taken
                    if (prevJug1 === jug1 && prevJug2 === jug2) {
                        // Same state, skip
                        continue;
                    } else if (jug1 === jug1Cap && prevJug1 !== jug1Cap) {
                        action = "Fill Jug 1";
                        explanation = "Filled Jug 1 to its maximum capacity";
                    } else if (jug2 === jug2Cap && prevJug2 !== jug2Cap) {
                        action = "Fill Jug 2";
                        explanation = "Filled Jug 2 to its maximum capacity";
                    } else if (jug1 === 0 && prevJug1 !== 0) {
                        action = "Empty Jug 1";
                        explanation = "Poured out all water from Jug 1";
                    } else if (jug2 === 0 && prevJug2 !== 0) {
                        action = "Empty Jug 2";
                        explanation = "Poured out all water from Jug 2";
                    } else if (prevJug1 > jug1 && prevJug2 < jug2) {
                        action = "Pour Jug 1 into Jug 2";
                        if (jug2 === jug2Cap) {
                            explanation = "Poured water from Jug 1 into Jug 2 until Jug 2 was full";
                        } else {
                            explanation = "Poured all water from Jug 1 into Jug 2";
                        }
                    } else if (prevJug1 < jug1 && prevJug2 > jug2) {
                        action = "Pour Jug 2 into Jug 1";
                        if (jug1 === jug1Cap) {
                            explanation = "Poured water from Jug 2 into Jug 1 until Jug 1 was full";
                        } else {
                            explanation = "Poured all water from Jug 2 into Jug 1";
                        }
                    } else {
                        action = "Move water";
                        explanation = `Changed from [${prevJug1}, ${prevJug2}] to [${jug1}, ${jug2}]`;
                    }
                    
                    solutionSteps.push({
                        action,
                        jug1,
                        jug2,
                        explanation
                    });
                    
                    prevJug1 = jug1;
                    prevJug2 = jug2;
                }
            }
            
            // Display the processed steps
            function displayResults(jug1Cap, jug2Cap) {
                // Clear previous results
                stepList.innerHTML = '';
                noSolution.style.display = 'none';
                
                // Update step count
                stepCount.textContent = `${solutionSteps.length - 1} steps`; // Subtract initial state
                
                if (solutionSteps.length <= 1) {
                    noSolution.style.display = 'block';
                    prevStepBtn.disabled = true;
                    nextStepBtn.disabled = true;
                    return;
                }
                
                // Create step items
                solutionSteps.forEach((step, index) => {
                    const listItem = document.createElement('li');
                    
                    // Alternate step colors
                    if (index === solutionSteps.length - 1) {
                        listItem.className = 'step-item step-item-success';
                    } else if (index % 3 === 0) {
                        listItem.className = 'step-item step-item-accent1';
                    } else if (index % 3 === 1) {
                        listItem.className = 'step-item step-item-accent2';
                    } else {
                        listItem.className = 'step-item step-item-accent3';
                    }
                    
                    listItem.id = `step-${index}`;
                    
                    const stepContent = document.createElement('div');
                    stepContent.innerHTML = `
                        <span class="step-number">${index}</span>
                        <strong>${step.action}</strong>: Jug 1 has ${step.jug1} units, Jug 2 has ${step.jug2} units.
                    `;
                    
                    if (step.explanation) {
                        const explanation = document.createElement('div');
                        explanation.className = 'explanation';
                        explanation.textContent = step.explanation;
                        stepContent.appendChild(explanation);
                    }
                    
                    listItem.appendChild(stepContent);
                    stepList.appendChild(listItem);
                    
                    // Add click event to step
                    listItem.addEventListener('click', () => {
                        currentStepIndex = index;
                        updateCurrentStep();
                    });
                });
                
                // Initialize with first step
                currentStepIndex = 0;
                updateCurrentStep();
                
                // Enable/disable navigation buttons
                updateNavigationButtons();
            }
            
            // Update the current step display
            function updateCurrentStep() {
                // Update jugs display
                const currentStep = solutionSteps[currentStepIndex];
                const jug1Cap = parseInt(document.getElementById('jug1Cap').value);
                const jug2Cap = parseInt(document.getElementById('jug2Cap').value);
                
                updateJugAnimation(currentStep.jug1, currentStep.jug2, jug1Cap, jug2Cap);
                
                // Highlight current step
                document.querySelectorAll('.step-item').forEach((item, index) => {
                    if (index === currentStepIndex) {
                        item.style.backgroundColor = '#e0f2fe';
                        item.style.transform = 'translateX(4px)';
                        item.scrollIntoView({ behavior: 'smooth', block: 'nearest' });
                    } else {
                        item.style.backgroundColor = '#f8fafc';
                        item.style.transform = 'none';
                    }
                });
                
                // Update navigation buttons
                updateNavigationButtons();
            }
            
            // Update navigation buttons state
            function updateNavigationButtons() {
                prevStepBtn.disabled = currentStepIndex <= 0;
                nextStepBtn.disabled = currentStepIndex >= solutionSteps.length - 1;
            }
            
            // Function to update jug visualization
            function updateJugAnimation(jug1Amount, jug2Amount, jug1Cap, jug2Cap) {
                const jug1Fill = document.getElementById('jug1Fill');
                const jug2Fill = document.getElementById('jug2Fill');
                
                // Calculate height proportional to capacity
                const jug1Height = (jug1Amount / jug1Cap) * 120;
                const jug2Height = (jug2Amount / jug2Cap) * 120;
                
                // Update the fill rectangles
                jug1Fill.setAttribute('y', 140 - jug1Height);
                jug1Fill.setAttribute('height', jug1Height);
                
                jug2Fill.setAttribute('y', 140 - jug2Height);
                jug2Fill.setAttribute('height', jug2Height);
            }
        });
    </script>
</body>
</html>